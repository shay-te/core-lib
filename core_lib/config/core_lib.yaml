# @package _global_
core_lib:
  mode_production: false

  datetime_format: null
  date_format: null
  time_format: null

  cache:
    no_cache: null

    ram: null

    memcached:
      url:
        host: ${oc.env:MEMCACHED_HOST}
        port: 11211

  data:
    sqlalchemy:
      log_queries: false
      create_db: false
      session:
        pool_recycle: 3600
        pool_pre_ping: false
        pool_size: 5
        max_overflow: 10
      url:
        protocol: 'sqlite'
        username: ~
        password: ~
        host: ~
        port: ~
        file: ~

    solr:
      always_commit: true
      url: ~

  alembic:
    version_table: alembic_version
    sqlalchemy.url: ${core_lib.data}
    # A generic, single database configuration.

    # path to migration scripts
    script_location: data_layers/data/db/migrations

    # template used to generate migration files
    file_template:  "%%(year)d-%%(month).2d-%%(day).2d_%%(rev)s_%%(slug)s"

    # timezone to use when rendering the date
    # within the migration file as well as the filename.
    # string value is passed to dateutil.tz.gettz()
    # leave blank for localtime
    timezone: ~

    # max length of characters to apply to the
    # "slug" field
    truncate_slug_length: ~

    # set to 'true' to run the environment during
    # the 'revision' command, regardless of autogenerate
    revision_environment: false

    # set to 'true' to allow .pyc and .pyo files without
    # a source .py file to be detected as revisions in the
    # versions/ directory
    sourceless: false

    # version location specification; this defaults
    # to alembic/versions.  When using multiple version
    # directories, initial revisions must be specified with --version-path
    # version_locations: %(here)s/bar %(here)s/bat alembic/versions

    # the output encoding used when revision files
    # are written from script.py.mako
    output_encoding: utf-8

    post_write_hooks:
    # post_write_hooks defines scripts or Python functions that are run
    # on newly generated revision scripts.  See the documentation for further
    # detail and examples

    # format using "black" - use the console_scripts runner, against the "black" entrypoint
    # hooks=black
    # black.type=console_scripts
    # black.entrypoint=black
    # black.options=-l 79

    # Logging configuration
    logger:
      keys: root,sqlalchemy,alembic

      handlers:
        keys: console

      formatters:
        generic:
          format: "%(levelname)-5.5s %(name)s %(message)s"
          datefmt: "%H:%M:%S"

      loggers:
        root:
          level: WARN
          handlers: console
          qualname: ~

        sqlalchemy:
          level: WARN
          handlers: ~
          qualname: sqlalchemy.engine

        alembic:
          level: INFO
          handlers: ~
          qualname: alembic

        console:
          class: StreamHandler
          args: (sys.stderr,)
          level: NOTSET
          formatter: generic

    version_file_name: '.migration_ver'
    render_as_batch: false

#  jobs:
#    - initial_delay: 2h32m # https://pypi.org/project/pytimeparse/
#      frequency: 1h32m
#      handler:
#        class: some_package.SomeClass
#        params:
#          some_param: some value

hydra:
  run:
    dir: .